---
description: >
  Project structure and file organization documentation for the AI Job Application Assistant.
  Documents the clear separation of entry points, file organization, and usage flow for the project.
  Provides guidance on project structure, entry points, and best practices for development and deployment.
globs:
  - "**/*.py"
  - "**/*.md"
  - "**/*.yaml"
  - "**/*.yml"
  - "**/*.json"
  - "**/*.toml"
alwaysApply: true
---

# Project Structure

## Entry Points

### ðŸŽ¯ Main Application: `main.py`
**Single entry point for the full application**

- **Purpose**: Run the complete AI Job Application Assistant
- **Requirements**: Gemini API key in `.env` file
- **Features**: Web interface, API endpoints, job search, resume optimization
- **Usage**: `python main.py` or `./start.sh`

### ðŸŽ­ Demo Script: `demo.py`
**Showcase features without API key**

- **Purpose**: Demonstrate core functionality without setup
- **Requirements**: None (no API key needed)
- **Features**: Mock data examples of all features
- **Usage**: `python demo.py`

### ðŸš€ Startup Script: `start.sh`
**Automated setup and launch**

- **Purpose**: Handle environment setup and launch application
- **Requirements**: None (handles setup automatically)
- **Features**: Virtual environment, dependencies, .env creation
- **Usage**: `./start.sh`

## File Organization

```
ai-job-apply/
â”œâ”€â”€ main.py              # ðŸŽ¯ Single main entry point
â”œâ”€â”€ demo.py              # ðŸŽ­ Demo script (no API key needed)
â”œâ”€â”€ start.sh             # ðŸš€ Automated startup script
â”œâ”€â”€ requirements.txt     # Python dependencies
â”œâ”€â”€ config.env.example   # Environment template
â”œâ”€â”€ src/                 # Application source code
â”‚   â”œâ”€â”€ api.py          # FastAPI application
â”‚   â”œâ”€â”€ config.py       # Configuration management
â”‚   â”œâ”€â”€ ai_agent.py     # AI integration
â”‚   â”œâ”€â”€ job_search.py   # Job search functionality
â”‚   â””â”€â”€ application_manager.py # Application management
â”œâ”€â”€ templates/          # Cover letter templates
â”œâ”€â”€ resumes/           # Resume storage
â”œâ”€â”€ output/            # Generated files
â””â”€â”€ logs/              # Application logs
```

## Why This Structure?

1. **Single Entry Point**: `main.py` is the only way to run the full application
2. **Clear Separation**: Demo script for testing, main script for production
3. **Automated Setup**: Startup script handles all environment setup
4. **No Confusion**: Each file has a clear, single purpose
5. **Best Practices**: Follows Python project structure conventions

## Usage Flow

1. **First Time**: Run `./start.sh` (handles everything)
2. **Demo**: Run `python demo.py` (see features without setup)
3. **Production**: Run `python main.py` (full application)
4. **Development**: Use `./start.sh` (includes reload mode) 